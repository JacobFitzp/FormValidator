(()=>{"use strict";const t=function(){};var n,e=(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});const i=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.breakSequence=!1,n}return e(n,t),n.prototype.check=function(t,n){return n.regexp.test(t)},n}(t);var r=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}}();const o=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.check=function(t,n){return!(t.length<n.min||t.length>n.max)},n}(t),s=function(){function t(){this.breakSequence=!0}return t.prototype.check=function(t,n){return t.length>0},t}(),l=function(){function n(){}return n.registerValidator=function(t,n){return this.validatorMap[t]=n,self},n.getValidatorInstance=function(n){var e=this.validatorMap[n];return e instanceof t?e:null},n.validatorMap={regexp:new i,stringLength:new o,notEmpty:new s},n}(),u=function(){function t(t){this.form=t}return t.prototype.validate=function(t,n){for(var e={valid:!0,messages:[],failedValidators:[]},i=0,r=Object.entries(n);i<r.length;i++){var o=r[i],s=o[0],u=o[1],a=l.getValidatorInstance(s);if(!a.check(t,u)&&(e.valid=!1,e.messages.push(u.message),e.failedValidators.push(s),a.breakSequence))return e}return e},t}(),a=function(){function t(){}return t.bind=function(t){this.plugins=t.plugins,this.plugins.length&&this.getPlugins().forEach((function(n){n.init(),t.on("fv.field.invalid",(function(t){n.onFieldInvalid(t.field,t.result)})),t.on("fv.field.valid",(function(t){n.onFieldValid(t.field)})),t.on("fv.form.invalid",(function(){n.onFormInvalid()}))}))},t.addPlugin=function(t){return this.plugins.push(t),!1},t.getPlugins=function(){return this.plugins},t}(),f=function(){function t(t){this.form=t}return t.prototype.buildCustomEvent=function(t,n){return new CustomEvent(t,{cancelable:!1,detail:n})},t.prototype.triggerEvent=function(t,n){this.form.dispatchEvent(this.buildCustomEvent(t,n))},t.prototype.triggerInvalidField=function(t,n){this.triggerEvent("fv.field.invalid",{form:this.form,field:t,result:n})},t.prototype.triggerValidField=function(t){this.triggerEvent("fv.field.valid",{form:this.form,field:t})},t.prototype.triggerInvalidForm=function(){this.triggerEvent("fv.form.invalid",{form:this.form})},t}();!function(){function t(t,n){this.form=t,this.options=n,this.fieldValidator=new u(t),this.eventHandler=new f(t),this.plugins=n.plugins||[],this.registerEventListeners(),a.bind(this)}t.prototype.on=function(t,n){this.form.addEventListener(t,(function(t){n(t)}))},t.prototype.addField=function(t,n){return this.options.fields[t]=n,this.registerEventListenersForField(this.getFieldElement(t),t),this},t.prototype.getFields=function(){return Object.keys(this.options.fields)},t.prototype.getField=function(t){return this.options.fields[t]},t.prototype.getFieldElement=function(t){return this.form.querySelector('[name="'+t+'"]')},t.prototype.getFieldElements=function(){var t=[];for(var n in this.options.fields)t.push(this.getFieldElement(n));return t},t.prototype.validateField=function(t){var n=this.getFieldElement(t),e=this.getField(t),i=this.fieldValidator.validate(n.value,e);return i.valid?this.eventHandler.triggerValidField(t):(this.eventHandler.triggerInvalidField(t,i),this.valid=!1),this},t.prototype.validateForm=function(){var t=this;return this.valid=!0,this.getFields().forEach((function(n){t.validateField(n)})),this},t.prototype.isFormValid=function(){return this.valid},t.prototype.registerEventListenersForField=function(t,n){var e=this;null!==t.getAttribute("value")&&this.validateField(n),t.addEventListener("input",(function(t){e.validateField(n)}))},t.prototype.registerEventListeners=function(){var t=this;this.getFields().forEach((function(n){t.registerEventListenersForField(t.getFieldElement(n),n)})),this.form.addEventListener("submit",(function(n){n.preventDefault(),t.validateForm(),t.isFormValid()&&t.handleSubmit(n)}))},t.prototype.handleSubmit=function(t){if(this.options.submitCallback instanceof Function&&this.options.submitCallback(t))return!0;this.form.submit()}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,